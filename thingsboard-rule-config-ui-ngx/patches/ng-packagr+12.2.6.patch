diff --git a/node_modules/ng-packagr/lib/flatten/rollup.js b/node_modules/ng-packagr/lib/flatten/rollup.js
index c9b5dc4..46e88d7 100644
--- a/node_modules/ng-packagr/lib/flatten/rollup.js
+++ b/node_modules/ng-packagr/lib/flatten/rollup.js
@@ -4,18 +4,35 @@ exports.rollupBundleFile = void 0;
 const rollup = require("rollup");
 const plugin_node_resolve_1 = require("@rollup/plugin-node-resolve");
 const sourcemaps = require("rollup-plugin-sourcemaps");
+const terser = require("rollup-plugin-terser");
 const commonJs = require("@rollup/plugin-commonjs");
 const rollupJson = require("@rollup/plugin-json");
 const log = require("../utils/log");
 const umd_module_id_strategy_1 = require("./umd-module-id-strategy");
 const path = require("path");
+const fs = require('fs');
+
 /** Runs rollup over the given entry file, writes a bundle file. */
 async function rollupBundleFile(opts) {
     log.debug(`rollup (v${rollup.VERSION}) ${opts.entry} to ${opts.dest} (${opts.format})`);
     // Create the bundle
+    const data = fs.readFileSync(path.join(__dirname, '../../../thingsboard/src/app/modules/common/modules-map.ts'), 'utf8');
+    const reg = /private modulesMap: {\[key: string\]: any} = {([^;]*)};/gsm;
+    const regMatch = reg.exec(data);
+    const modulesStr = regMatch[1];
+    const externalModuleIds = [];
+    modulesStr.split(',\n').forEach(
+      (line) => {
+        const moduleId = line.trim().split(":")[0].replaceAll("'", "").trim();
+        if (moduleId.length) {
+          externalModuleIds.push(moduleId);
+        }
+      }
+    );
+
     const bundle = await rollup.rollup({
         context: 'this',
-        external: moduleId => isExternalDependency(moduleId, opts.format),
+        external: moduleId => isExternalDependency(moduleId, opts.format, externalModuleIds),
         inlineDynamicImports: false,
         cache: opts.cache,
         input: opts.entry,
@@ -29,6 +46,8 @@ async function rollupBundleFile(opts) {
             // @ts-ignore
             sourcemaps(),
             { transform: opts.transform },
+            // @ts-ignore
+            terser.terser()
         ],
         onwarn: warning => {
             if (typeof warning === 'string') {
@@ -52,6 +71,7 @@ async function rollupBundleFile(opts) {
         format: opts.format,
         amd: opts.amd,
         file: opts.dest,
+        compact: true,
         banner: '',
         globals: moduleId => umd_module_id_strategy_1.umdModuleIdStrategy(moduleId, opts.umdModuleIds || {}),
         sourcemap: true,
@@ -59,9 +79,10 @@ async function rollupBundleFile(opts) {
     return bundle.cache;
 }
 exports.rollupBundleFile = rollupBundleFile;
-function isExternalDependency(moduleId, format) {
+function isExternalDependency(moduleId, format, externalModuleIds) {
     // more information about why we don't check for 'node_modules' path
     // https://github.com/rollup/rollup-plugin-node-resolve/issues/110#issuecomment-350353632
+
     if (moduleId.startsWith('.') || moduleId.startsWith('/') || path.isAbsolute(moduleId)) {
         // if it's either 'absolute', marked to embed, starts with a '.' or '/' or is the umd bundle and is tslib
         return false;
@@ -69,6 +90,9 @@ function isExternalDependency(moduleId, format) {
     if (format === 'umd' && moduleId.startsWith('tslib')) {
         return false;
     }
+    if (externalModuleIds.indexOf(moduleId) === -1) {
+        return false;
+    }
     return true;
 }
 //# sourceMappingURL=rollup.js.map
\ No newline at end of file
diff --git a/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.d.ts b/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.d.ts
index f9f61da..94790cb 100644
--- a/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.d.ts
+++ b/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.d.ts
@@ -10,6 +10,8 @@ export interface DestinationFiles {
     fesm2015: string;
     /** Absolute path of this entry point `ESM2015` module */
     esm2015: string;
+    /** Absolute path of this entry point `SystemJS` module */
+    system: string;
     /** Absolute path of this entry point `UMD` bundle */
     umd: string;
 }
diff --git a/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.js b/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.js
index 2540f39..7ed83c9 100644
--- a/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.js
+++ b/node_modules/ng-packagr/lib/ng-package/entry-point/entry-point.js
@@ -77,6 +77,7 @@ class NgEntryPoint {
             declarations: pathJoinWithDest(secondaryDir, `${flatModuleFile}.d.ts`),
             esm2015: pathJoinWithDest('esm2015', secondaryDir, `${flatModuleFile}.js`),
             fesm2015: pathJoinWithDest('fesm2015', `${flatModuleFile}.js`),
+            system: pathJoinWithDest('system', `${flatModuleFile}.js`),
             umd: pathJoinWithDest('bundles', `${flatModuleFile}.umd.js`),
         };
     }
diff --git a/node_modules/ng-packagr/lib/ng-package/entry-point/write-bundles.transform.js b/node_modules/ng-packagr/lib/ng-package/entry-point/write-bundles.transform.js
index ef9b0a3..b29670f 100644
--- a/node_modules/ng-packagr/lib/ng-package/entry-point/write-bundles.transform.js
+++ b/node_modules/ng-packagr/lib/ng-package/entry-point/write-bundles.transform.js
@@ -18,7 +18,7 @@ const writeBundlesTransform = (options) => transform_1.transformFromPromise(asyn
         prev[ep.moduleId] = ep.umdId;
         return prev;
     }, {});
-    const { fesm2015, esm2015, umd } = destinationFiles;
+    const { fesm2015, esm2015, system, umd } = destinationFiles;
     const opts = {
         sourceRoot: tsConfig.options.sourceRoot,
         amd: { id: ngEntryPoint.amdId },
@@ -33,7 +33,20 @@ const writeBundlesTransform = (options) => transform_1.transformFromPromise(asyn
         discardStdin: false,
     });
     try {
-        spinner.start('Bundling to FESM2015');
+        spinner.start('Bundling to SystemJS');
+        const rollupSystemJsCache = await rollup_1.rollupBundleFile({
+          ...opts,
+          moduleName: null, // ngEntryPoint.moduleId,
+          format: 'system',
+          dest: system,
+          cache: cache.rollupSystemJsCache,
+        });
+        spinner.succeed();
+        if (options.watch) {
+          cache.rollupSystemJsCache = rollupSystemJsCache;
+          return;
+        }
+        /* spinner.start('Bundling to FESM2015');
         const rollupFESMCache = await rollup_1.rollupBundleFile({
             ...opts,
             moduleName: ngEntryPoint.moduleId,
@@ -42,10 +55,6 @@ const writeBundlesTransform = (options) => transform_1.transformFromPromise(asyn
             cache: cache.rollupFESMCache,
         });
         spinner.succeed();
-        if (options.watch) {
-            cache.rollupFESMCache = rollupFESMCache;
-            return;
-        }
         spinner.start('Bundling to UMD');
         await rollup_1.rollupBundleFile({
             ...opts,
@@ -55,7 +64,7 @@ const writeBundlesTransform = (options) => transform_1.transformFromPromise(asyn
             dest: umd,
             transform: downlevel_plugin_1.downlevelCodeWithTsc,
         });
-        spinner.succeed();
+        spinner.succeed();*/
     }
     catch (error) {
         spinner.fail();
diff --git a/node_modules/ng-packagr/lib/ng-package/nodes.d.ts b/node_modules/ng-packagr/lib/ng-package/nodes.d.ts
index 096eac6..bd56904 100644
--- a/node_modules/ng-packagr/lib/ng-package/nodes.d.ts
+++ b/node_modules/ng-packagr/lib/ng-package/nodes.d.ts
@@ -36,6 +36,7 @@ export declare class EntryPointNode extends Node {
         analysesSourcesFileCache: FileCache;
         moduleResolutionCache: ts.ModuleResolutionCache;
         rollupFESMCache?: RollupCache;
+        rollupSystemJsCache?: RollupCache;
         stylesheetProcessor?: StylesheetProcessor | ivy.StylesheetProcessor;
         oldNgtscProgram?: NgtscProgram;
         oldBuilder?: ts.EmitAndSemanticDiagnosticsBuilderProgram;
